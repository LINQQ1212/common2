// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	GetFiles(ctx context.Context, in *FilesReq, opts ...grpc.CallOption) (*FilesRes, error)
	NewIcon(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*FilesRes, error)
	GetListView(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*FileRes, error)
	GetArticleView(ctx context.Context, in *ArticleReq, opts ...grpc.CallOption) (*ArticleFileRes, error)
	HDFile(ctx context.Context, in *DFileReq, opts ...grpc.CallOption) (*Res, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) GetFiles(ctx context.Context, in *FilesReq, opts ...grpc.CallOption) (*FilesRes, error) {
	out := new(FilesRes)
	err := c.cc.Invoke(ctx, "/Greeter/getFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) NewIcon(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*FilesRes, error) {
	out := new(FilesRes)
	err := c.cc.Invoke(ctx, "/Greeter/newIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetListView(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*FileRes, error) {
	out := new(FileRes)
	err := c.cc.Invoke(ctx, "/Greeter/GetListView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetArticleView(ctx context.Context, in *ArticleReq, opts ...grpc.CallOption) (*ArticleFileRes, error) {
	out := new(ArticleFileRes)
	err := c.cc.Invoke(ctx, "/Greeter/GetArticleView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) HDFile(ctx context.Context, in *DFileReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/Greeter/HDFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	GetFiles(context.Context, *FilesReq) (*FilesRes, error)
	NewIcon(context.Context, *NullRequest) (*FilesRes, error)
	GetListView(context.Context, *NullRequest) (*FileRes, error)
	GetArticleView(context.Context, *ArticleReq) (*ArticleFileRes, error)
	HDFile(context.Context, *DFileReq) (*Res, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) GetFiles(context.Context, *FilesReq) (*FilesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedGreeterServer) NewIcon(context.Context, *NullRequest) (*FilesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewIcon not implemented")
}
func (UnimplementedGreeterServer) GetListView(context.Context, *NullRequest) (*FileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListView not implemented")
}
func (UnimplementedGreeterServer) GetArticleView(context.Context, *ArticleReq) (*ArticleFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleView not implemented")
}
func (UnimplementedGreeterServer) HDFile(context.Context, *DFileReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HDFile not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/getFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetFiles(ctx, req.(*FilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_NewIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).NewIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/newIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).NewIcon(ctx, req.(*NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetListView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetListView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/GetListView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetListView(ctx, req.(*NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetArticleView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetArticleView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/GetArticleView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetArticleView(ctx, req.(*ArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_HDFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).HDFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/HDFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).HDFile(ctx, req.(*DFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getFiles",
			Handler:    _Greeter_GetFiles_Handler,
		},
		{
			MethodName: "newIcon",
			Handler:    _Greeter_NewIcon_Handler,
		},
		{
			MethodName: "GetListView",
			Handler:    _Greeter_GetListView_Handler,
		},
		{
			MethodName: "GetArticleView",
			Handler:    _Greeter_GetArticleView_Handler,
		},
		{
			MethodName: "HDFile",
			Handler:    _Greeter_HDFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
